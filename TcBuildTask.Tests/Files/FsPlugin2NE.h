//
// Auto-generated by dnne-gen
//
// .NET Assembly: FsPlugin2
//

//
// Declare exported functions
//
#ifndef __DNNE_GENERATED_HEADER_FSPLUGIN2__
#define __DNNE_GENERATED_HEADER_FSPLUGIN2__

#include <stddef.h>
#include <stdint.h>
#include <dnne.h>

// Computed from WfxWrapper.FsWrapper.Init
DNNE_API int32_t DNNE_CALLTYPE FsInit(int32_t pluginNumber, intptr_t progressProcPtr, intptr_t logProcPtr, intptr_t requestProcPtr);

// Computed from WfxWrapper.FsWrapper.InitW
DNNE_API int32_t DNNE_CALLTYPE FsInitW(int32_t pluginNumber, intptr_t progressProcWPtr, intptr_t logProcWPtr, intptr_t requestProcWPtr);

// Computed from WfxWrapper.FsWrapper.FindFirst
DNNE_API intptr_t DNNE_CALLTYPE FsFindFirst(intptr_t pathPtr, intptr_t findFileData);

// Computed from WfxWrapper.FsWrapper.FindFirstW
DNNE_API intptr_t DNNE_CALLTYPE FsFindFirstW(intptr_t pathPtr, intptr_t findFileData);

// Computed from WfxWrapper.FsWrapper.FindNext
DNNE_API int32_t DNNE_CALLTYPE FsFindNext(intptr_t hdl, intptr_t findFileData);

// Computed from WfxWrapper.FsWrapper.FindNextW
DNNE_API int32_t DNNE_CALLTYPE FsFindNextW(intptr_t hdl, intptr_t findFileData);

// Computed from WfxWrapper.FsWrapper.FindClose
DNNE_API int32_t DNNE_CALLTYPE FsFindClose(intptr_t hdl);

// Computed from WfxWrapper.FsWrapper.SetCryptCallback
DNNE_API void DNNE_CALLTYPE FsSetCryptCallback(intptr_t cryptProcPtr, int32_t cryptNumber, int32_t flags);

// Computed from WfxWrapper.FsWrapper.SetCryptCallbackW
DNNE_API void DNNE_CALLTYPE FsSetCryptCallbackW(intptr_t cryptProcWPtr, int32_t cryptNumber, int32_t flags);

// Computed from WfxWrapper.FsWrapper.GetDefRootName
DNNE_API void DNNE_CALLTYPE FsGetDefRootName(intptr_t rootName, int32_t maxLen);

// Computed from WfxWrapper.FsWrapper.DeleteFile
DNNE_API int32_t DNNE_CALLTYPE FsDeleteFile(intptr_t fileNamePtr);

// Computed from WfxWrapper.FsWrapper.DeleteFileW
DNNE_API int32_t DNNE_CALLTYPE FsDeleteFileW(intptr_t fileNamePtr);

// Computed from WfxWrapper.FsWrapper.Disconnect
DNNE_API int32_t DNNE_CALLTYPE FsDisconnect(intptr_t disconnectRootPtr);

// Computed from WfxWrapper.FsWrapper.DisconnectW
DNNE_API int32_t DNNE_CALLTYPE FsDisconnectW(intptr_t disconnectRootPtr);

// Computed from WfxWrapper.FsWrapper.SetDefaultParams
DNNE_API void DNNE_CALLTYPE FsSetDefaultParams(intptr_t defParamsPtr);

// Computed from WfxWrapper.FsWrapper.GetBackgroundFlags
DNNE_API int32_t DNNE_CALLTYPE FsGetBackgroundFlags(void);

#endif // __DNNE_GENERATED_HEADER_FSPLUGIN2__

//
// Define exported functions
//
#ifdef DNNE_COMPILE_AS_SOURCE

#ifdef DNNE_WINDOWS
    #ifdef _WCHAR_T_DEFINED
        typedef wchar_t char_t;
    #else
        typedef unsigned short char_t;
    #endif
#else
    typedef char char_t;
#endif

//
// Forward declarations
//

extern void* get_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method,
    const char_t* dotnet_delegate_type);

extern void* get_fast_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method);

//
// String constants
//

static const char_t* t1_name = DNNE_STR("WfxWrapper.FsWrapper, FsPlugin2");

//
// Exports
//

// Computed from WfxWrapper.FsWrapper.Init
static int32_t (DNNE_CALLTYPE* FsInit_ptr)(int32_t pluginNumber, intptr_t progressProcPtr, intptr_t logProcPtr, intptr_t requestProcPtr);
DNNE_API int32_t DNNE_CALLTYPE FsInit(int32_t pluginNumber, intptr_t progressProcPtr, intptr_t logProcPtr, intptr_t requestProcPtr)
{
    if (FsInit_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Init");
        FsInit_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsInit_ptr(pluginNumber, progressProcPtr, logProcPtr, requestProcPtr);
}

// Computed from WfxWrapper.FsWrapper.InitW
static int32_t (DNNE_CALLTYPE* FsInitW_ptr)(int32_t pluginNumber, intptr_t progressProcWPtr, intptr_t logProcWPtr, intptr_t requestProcWPtr);
DNNE_API int32_t DNNE_CALLTYPE FsInitW(int32_t pluginNumber, intptr_t progressProcWPtr, intptr_t logProcWPtr, intptr_t requestProcWPtr)
{
    if (FsInitW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("InitW");
        FsInitW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsInitW_ptr(pluginNumber, progressProcWPtr, logProcWPtr, requestProcWPtr);
}

// Computed from WfxWrapper.FsWrapper.FindFirst
static intptr_t (DNNE_CALLTYPE* FsFindFirst_ptr)(intptr_t pathPtr, intptr_t findFileData);
DNNE_API intptr_t DNNE_CALLTYPE FsFindFirst(intptr_t pathPtr, intptr_t findFileData)
{
    if (FsFindFirst_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("FindFirst");
        FsFindFirst_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsFindFirst_ptr(pathPtr, findFileData);
}

// Computed from WfxWrapper.FsWrapper.FindFirstW
static intptr_t (DNNE_CALLTYPE* FsFindFirstW_ptr)(intptr_t pathPtr, intptr_t findFileData);
DNNE_API intptr_t DNNE_CALLTYPE FsFindFirstW(intptr_t pathPtr, intptr_t findFileData)
{
    if (FsFindFirstW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("FindFirstW");
        FsFindFirstW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsFindFirstW_ptr(pathPtr, findFileData);
}

// Computed from WfxWrapper.FsWrapper.FindNext
static int32_t (DNNE_CALLTYPE* FsFindNext_ptr)(intptr_t hdl, intptr_t findFileData);
DNNE_API int32_t DNNE_CALLTYPE FsFindNext(intptr_t hdl, intptr_t findFileData)
{
    if (FsFindNext_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("FindNext");
        FsFindNext_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsFindNext_ptr(hdl, findFileData);
}

// Computed from WfxWrapper.FsWrapper.FindNextW
static int32_t (DNNE_CALLTYPE* FsFindNextW_ptr)(intptr_t hdl, intptr_t findFileData);
DNNE_API int32_t DNNE_CALLTYPE FsFindNextW(intptr_t hdl, intptr_t findFileData)
{
    if (FsFindNextW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("FindNextW");
        FsFindNextW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsFindNextW_ptr(hdl, findFileData);
}

// Computed from WfxWrapper.FsWrapper.FindClose
static int32_t (DNNE_CALLTYPE* FsFindClose_ptr)(intptr_t hdl);
DNNE_API int32_t DNNE_CALLTYPE FsFindClose(intptr_t hdl)
{
    if (FsFindClose_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("FindClose");
        FsFindClose_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsFindClose_ptr(hdl);
}

// Computed from WfxWrapper.FsWrapper.SetCryptCallback
static void (DNNE_CALLTYPE* FsSetCryptCallback_ptr)(intptr_t cryptProcPtr, int32_t cryptNumber, int32_t flags);
DNNE_API void DNNE_CALLTYPE FsSetCryptCallback(intptr_t cryptProcPtr, int32_t cryptNumber, int32_t flags)
{
    if (FsSetCryptCallback_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetCryptCallback");
        FsSetCryptCallback_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    FsSetCryptCallback_ptr(cryptProcPtr, cryptNumber, flags);
}

// Computed from WfxWrapper.FsWrapper.SetCryptCallbackW
static void (DNNE_CALLTYPE* FsSetCryptCallbackW_ptr)(intptr_t cryptProcWPtr, int32_t cryptNumber, int32_t flags);
DNNE_API void DNNE_CALLTYPE FsSetCryptCallbackW(intptr_t cryptProcWPtr, int32_t cryptNumber, int32_t flags)
{
    if (FsSetCryptCallbackW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetCryptCallbackW");
        FsSetCryptCallbackW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    FsSetCryptCallbackW_ptr(cryptProcWPtr, cryptNumber, flags);
}

// Computed from WfxWrapper.FsWrapper.GetDefRootName
static void (DNNE_CALLTYPE* FsGetDefRootName_ptr)(intptr_t rootName, int32_t maxLen);
DNNE_API void DNNE_CALLTYPE FsGetDefRootName(intptr_t rootName, int32_t maxLen)
{
    if (FsGetDefRootName_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetDefRootName");
        FsGetDefRootName_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    FsGetDefRootName_ptr(rootName, maxLen);
}

// Computed from WfxWrapper.FsWrapper.DeleteFile
static int32_t (DNNE_CALLTYPE* FsDeleteFile_ptr)(intptr_t fileNamePtr);
DNNE_API int32_t DNNE_CALLTYPE FsDeleteFile(intptr_t fileNamePtr)
{
    if (FsDeleteFile_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeleteFile");
        FsDeleteFile_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsDeleteFile_ptr(fileNamePtr);
}

// Computed from WfxWrapper.FsWrapper.DeleteFileW
static int32_t (DNNE_CALLTYPE* FsDeleteFileW_ptr)(intptr_t fileNamePtr);
DNNE_API int32_t DNNE_CALLTYPE FsDeleteFileW(intptr_t fileNamePtr)
{
    if (FsDeleteFileW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeleteFileW");
        FsDeleteFileW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsDeleteFileW_ptr(fileNamePtr);
}

// Computed from WfxWrapper.FsWrapper.Disconnect
static int32_t (DNNE_CALLTYPE* FsDisconnect_ptr)(intptr_t disconnectRootPtr);
DNNE_API int32_t DNNE_CALLTYPE FsDisconnect(intptr_t disconnectRootPtr)
{
    if (FsDisconnect_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Disconnect");
        FsDisconnect_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsDisconnect_ptr(disconnectRootPtr);
}

// Computed from WfxWrapper.FsWrapper.DisconnectW
static int32_t (DNNE_CALLTYPE* FsDisconnectW_ptr)(intptr_t disconnectRootPtr);
DNNE_API int32_t DNNE_CALLTYPE FsDisconnectW(intptr_t disconnectRootPtr)
{
    if (FsDisconnectW_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DisconnectW");
        FsDisconnectW_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsDisconnectW_ptr(disconnectRootPtr);
}

// Computed from WfxWrapper.FsWrapper.SetDefaultParams
static void (DNNE_CALLTYPE* FsSetDefaultParams_ptr)(intptr_t defParamsPtr);
DNNE_API void DNNE_CALLTYPE FsSetDefaultParams(intptr_t defParamsPtr)
{
    if (FsSetDefaultParams_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetDefaultParams");
        FsSetDefaultParams_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    FsSetDefaultParams_ptr(defParamsPtr);
}

// Computed from WfxWrapper.FsWrapper.GetBackgroundFlags
static int32_t (DNNE_CALLTYPE* FsGetBackgroundFlags_ptr)(void);
DNNE_API int32_t DNNE_CALLTYPE FsGetBackgroundFlags(void)
{
    if (FsGetBackgroundFlags_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetBackgroundFlags");
        FsGetBackgroundFlags_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return FsGetBackgroundFlags_ptr();
}

#endif // DNNE_COMPILE_AS_SOURCE
